// THIS KERNEL IS MACHINE-GENERATED BY ARK.
#define ARK_THREADS_PER_BLOCK 256
#define ARK_KERNELS_SYNC_CLKS_CNT 1048576
__device__ volatile unsigned long long int *_ARK_DOORBELL;
__device__ volatile unsigned int *_ARK_SC;
__device__ volatile unsigned int *_ARK_RC;
__device__ long long int *_ARK_CLKS;
__device__ int _ITER = 0;
#include "ark_kernels.h"
__device__ ark::sync::State _ARK_LOOP_SYNC_STATE;
__device__ ark::sync::State _ARK_LOOP_SYNC_STATE_COMM;

__device__ char *_ARK_BUF;
__device__ bool flag = false;
__noinline__ __device__ void uop0(ark::half *_0, ark::half *_1, ark::half *_2,
                                  int tx, int ty, int tz)
{
    ark::matmul<512, 512, 192, false, false, 0, false, 128, 83456, 64, 64, 64>(
        _0, _1, _2, tx, ty, tz);
    ark::copy_kernel<512, 512, 192, false, false, 0, false, 128, 83456, 64, 64, 64>();
}
__noinline__ __device__ void uop1(ark::half *_0, ark::half *_1, ark::half *_2,
                                  int tx, int ty, int tz)
{
    ark::matmul<512, 512, 128, false, false, 0, false, 128, 83456, 64, 64, 64>(
        _0, _1, _2, tx, ty, tz);
}
// tile dims: (8, 8, 1)
__noinline__ __device__ void op1(int _ti)
{
    uop0((ark::half *)&_ARK_BUF[1048576], (ark::half *)&_ARK_BUF[0],
         (ark::half *)&_ARK_BUF[524288], (_ti & 7), (_ti >> 3) & 7, _ti >> 6);
}
// tile dims: (8, 8, 1)
__noinline__ __device__ void op2(int _ti)
{
    uop0((ark::half *)&_ARK_BUF[1572864], (ark::half *)&_ARK_BUF[196608],
         (ark::half *)&_ARK_BUF[524672], (_ti & 7), (_ti >> 3) & 7, _ti >> 6);
}
// tile dims: (8, 8, 1)
__noinline__ __device__ void op3(int _ti)
{
    uop1((ark::half *)&_ARK_BUF[2097152], (ark::half *)&_ARK_BUF[393216],
         (ark::half *)&_ARK_BUF[525056], (_ti & 7), (_ti >> 3) & 7, _ti >> 6);
}
DEVICE void depth0()
{
    if (blockIdx.x < 12) {
        if (threadIdx.x < 256) {
            op1(2 * blockIdx.x + (threadIdx.x >> 7));
        }
    } else if (blockIdx.x < 32) {
        if (threadIdx.x < 256) {
            op1(2 * (blockIdx.x - 12) + (threadIdx.x >> 7) + 24);
        }
    } else if (blockIdx.x < 64) {
        if (threadIdx.x < 256) {
            op2(2 * (blockIdx.x - 32) + (threadIdx.x >> 7));
        }
    } else if (blockIdx.x < 96) {
        if (threadIdx.x < 256) {
            op3(2 * (blockIdx.x - 64) + (threadIdx.x >> 7));
        }
    }
}
DEVICE void uop2(ark::half *_0, ark::half *_1, int tx, int ty, int tz)
{
    ark::scale<512, 512, 32, 0, 64, 8, 1>(_0, _1, 2.3, tx, ty, tz);
}
DEVICE void uop3(ark::half *_0, ark::half *_1, ark::half *_2, int tx, int ty,
                 int tz)
{
    ark::add<512, 512, 0, 32, 0, 64, 8, 1>(_0, _1, _2, tx, ty, tz);
}
DEVICE void uop4(ark::half *_0, ark::half *_1, int tx, int ty, int tz)
{
    ark::reduce_batch<512, 512, 3, 0, 32, 0, 64, 8, 1>(_0, _1, tx, ty, tz);
}
// tile dims: (64, 8, 1)
__noinline__ __device__ void op0(int _ti)
{
    uop4((ark::half *)&_ARK_BUF[2621440], (ark::half *)&_ARK_BUF[1048576],
         (_ti & 63), (_ti >> 6) & 7, _ti >> 9);
    uop3((ark::half *)&_ARK_BUF[2621440], (ark::half *)&_ARK_BUF[2621440],
         (ark::half *)&_ARK_BUF[3145728], (_ti & 63), (_ti >> 6) & 7, _ti >> 9);
    uop2((ark::half *)&_ARK_BUF[2621440], (ark::half *)&_ARK_BUF[2621440],
         (_ti & 63), (_ti >> 6) & 7, _ti >> 9);
}
DEVICE void depth1()
{
    if (blockIdx.x < 80) {
        if (threadIdx.x < 160) {
            op0(5 * blockIdx.x + (threadIdx.x >> 5));
        }
    } else {
        if (threadIdx.x < 128) {
            op0(4 * (blockIdx.x - 80) + (threadIdx.x >> 5) + 400);
        }
    }
}
__device__ void ark_loop_body(int _iter)
{
    if (blockIdx.x < 108) {
        ark::sync_gpu<107>(_ARK_LOOP_SYNC_STATE);
        depth0();
        ark::sync_gpu<108>(_ARK_LOOP_SYNC_STATE_COMM);
        depth1();
    } else {
        send();
        recv();
        ark::sync_gpu<108>(_ARK_LOOP_SYNC_STATE_COMM);
        flag = 1;
    }
}
extern "C" __global__
    __launch_bounds__(256, 1) void test_scheduler_simple_mm(volatile int *_it_a,
                                                            volatile int *_it_b)
{
    ark::sync_gpu<108>(_ARK_LOOP_SYNC_STATE);
    for (;;) {
        if (threadIdx.x == 0) {
            *_it_b = 0;
            while (*_it_a == 0) {
            }
            _ITER = *_it_a;
        }
        __syncthreads();
        if (_ITER < 0) {
            return;
        }
        for (int _i = 0; _i < _ITER; ++_i) {
            ark_loop_body(_i);
            ark::sync_gpu<108>(_ARK_LOOP_SYNC_STATE);
        }
        if (threadIdx.x == 0) {
            *_it_a = 0;
            while (*_it_b == 0) {
            }
            _ITER = *_it_b;
        }
        __syncthreads();
        if (_ITER < 0) {
            return;
        }
        for (int _i = 0; _i < _ITER; ++_i) {
            ark_loop_body(_i);
            ark::sync_gpu<108>(_ARK_LOOP_SYNC_STATE);
        }
    }
}
