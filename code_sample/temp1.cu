// THIS KERNEL IS MACHINE-GENERATED BY ARK.
#define ARK_THREADS_PER_BLOCK 512
#define ARK_KERNELS_SYNC_CLKS_CNT 1048576
__device__ volatile unsigned long long int *_ARK_DOORBELL;
__device__ volatile unsigned           int *_ARK_SC;
__device__ volatile unsigned           int *_ARK_RC;
__device__ long long int *_ARK_CLKS;
__device__ int _ITER = 0;
#include "ark_kernels.h"
__device__ ark::sync::State _ARK_LOOP_SYNC_STATE;
__device__ char *_ARK_BUF;
#include <stdio.h>
// tile dims: (8, 8, 1)
#ifdef DEBUG
#define PRINT(format, ...)                                                     \
    if (threadIdx.x == 0 && blockIdx.x == 0)                                   \
        printf("gpu: %d ", gpu_id);                                            \
    if (threadIdx.x == 0 && blockIdx.x == 0)                                   \
    printf(format, __VA_ARGS__)
#else
#define PRINT(format, ...)
#endif

__device__ int gpu_id;
__device__ char *dest_ptr;
volatile __device__ char *this_flag_ptr;
volatile __device__ char *other_flag_ptr;

// tile dims: (64, 128, 1)
__noinline__ __device__ void matmul_tile_task(int tile_idx)
{
    ark::matmul<16384, 16384, 16384, false, false, 0, false, 256, 166912, 128,
                256, 64>((ark::half *)&_ARK_BUF[1073741824],
                         (ark::half *)&_ARK_BUF[0],
                         (ark::half *)&_ARK_BUF[536870912], (tile_idx & 63),
                         (tile_idx >> 6) & 127, tile_idx >> 13);
}
// tile dims: (256, 256, 1) (64, 128, 1)
__noinline__ __device__ void add_tile_task(int tile_idx)
{
    ark::add<16384, 16384, 0, 256, 0, 128, 256, 1>(
        (ark::half *)&_ARK_BUF[1073741824], (ark::half *)&_ARK_BUF[1073741824],
        (ark::half *)&_ARK_BUF[1610612736], (tile_idx & 63),
        (tile_idx >> 6) & 127, tile_idx >> 13);
}
// tile dims: (256, 256, 1) (64, 128, 1)
__noinline__ __device__ void scale_tile_task(int tile_idx)
{
    ark::scale<16384, 16384, 256, 0, 128, 256, 1>(
        (ark::half *)&_ARK_BUF[1073741824], (ark::half *)&_ARK_BUF[1073741824],
        0.5, (tile_idx & 63), (tile_idx >> 6) & 127, tile_idx >> 13);
}

__noinline__ __device__ void send_tile_task(int tile_idx)
{
    // wait until the other side is ready
    PRINT("waiting for other side:%d\n", *other_flag_ptr);
    if (threadIdx.x == 0) {
        while (other_flag_ptr[tile_idx] != 0)
            ;
    }
    // we should only sync half of the threads in the block
    __syncthreads();
    // __syncwarp();
    PRINT("other side is ready, this flag%d other flag%d\n", *this_flag_ptr,
          *other_flag_ptr)
    ark::comm::copy_kernel<16384, 16384, 256, 0, 128, 256, 1>(
        (ark::half *)dest_ptr, (ark::half *)&_ARK_BUF[1048576], (tile_idx & 63),
        (tile_idx >> 6) & 127, tile_idx >> 13);
    // set the finish flag
    if (threadIdx.x == 0)
        other_flag_ptr[tile_idx] += 1;
    PRINT("send done, this flag:%d other flag:%d\n", *this_flag_ptr,
          *other_flag_ptr);
}

__noinline__ __device__ void recv_tile_task(int tile_idx)
{
    if (threadIdx.x == 0) {
        while (this_flag_ptr[tile_idx] == 0)
            ;
    }
    __syncthreads();
    PRINT("recv done,this flag%d\n", *this_flag_ptr);
}

// extern "C" __global__ void matmul_kernel() { matmul(); }

__noinline__ __device__ void seq_tile_task(int tile_idx)
{
    matmul_tile_task(tile_idx);
    // send_tile_task(tile_idx);
    // recv_tile_task(tile_idx);
    // add_tile_task(tile_idx);
    // scale_tile_task(tile_idx);
}

__device__ void ark_loop_body(int _iter)
{
    PRINT("iter: %d\n", _iter);
    ark::sync_gpu<108>(_ARK_LOOP_SYNC_STATE);
    // the matrix size is 16384x16384 and the tile size is 64x8
    // each block calculate 2 tiles, so the tile_idx add 108*2 each time
    // for (int tile_idx = 0; tile_idx < 8392; tile_idx += 216) {
    // seq_tile_task(2 * (blockIdx.x - 0) + threadIdx.x / 256 + tile_idx);
    // }
    if(blockIdx.x == 0&&threadIdx.x < 256){
        seq_tile_task(2 * (blockIdx.x - 0) + threadIdx.x / 256);
    }
}
extern "C" __global__ __launch_bounds__(512, 1)
void merge_com_kernel(volatile int *_it_a, volatile int *_it_b)
{
  *this_flag_ptr=0;
  ark::sync_gpu<108>(_ARK_LOOP_SYNC_STATE);
  for (;;) {
    if (threadIdx.x == 0) {
      *_it_b = 0;
      while (*_it_a == 0) {}
      _ITER = *_it_a;
    }
    __syncthreads();
    if (_ITER < 0) {
      return;
    }
    for (int _i = 0; _i < _ITER; ++_i) {
      ark_loop_body(_i);
      ark::sync_gpu<108>(_ARK_LOOP_SYNC_STATE);
    }
    if (threadIdx.x == 0) {
      *_it_a = 0;
      while (*_it_b == 0) {}
      _ITER = *_it_b;
    }
    __syncthreads();
    if (_ITER < 0) {
      return;
    }
    for (int _i = 0; _i < _ITER; ++_i) {
      ark_loop_body(_i);
      ark::sync_gpu<108>(_ARK_LOOP_SYNC_STATE);
    }
  }
}
