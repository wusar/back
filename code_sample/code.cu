// THIS KERNEL IS MACHINE-GENERATED BY ARK.
#define ARK_THREADS_PER_BLOCK 256
#define ARK_KERNELS_SYNC_CLKS_CNT 1048576
__device__ volatile unsigned long long int *_ARK_DOORBELL;
__device__ volatile unsigned           int *_ARK_SC;
__device__ volatile unsigned           int *_ARK_RC;
__device__ long long int *_ARK_CLKS;
__device__ int _ITER = 0;
#include "ark_kernels.h"
__device__ ark::sync::State _ARK_LOOP_SYNC_STATE;
__device__ char *_ARK_BUF;
// tile dims: (8, 8, 1)
__noinline__ __device__ void op_0_matmul_tile_task(int tile_idx) {
ark::matmul<512, 512, 512, false, false, 0, false, 128, 83456, 64, 64, 64>((ark::half *)&_ARK_BUF[1048576], (ark::half *)&_ARK_BUF[0], (ark::half *)&_ARK_BUF[524288], (tile_idx & 7), (tile_idx >> 3) & 7, tile_idx >> 6);
}
// tile dims: (64, 8, 1)
__noinline__ __device__ void op_1_add_tile_task(int tile_idx) {
ark::add<512, 512, 0, 32, 0, 64, 8, 1>((ark::half *)&_ARK_BUF[1048576], (ark::half *)&_ARK_BUF[1048576], (ark::half *)&_ARK_BUF[1572864], (tile_idx & 63), (tile_idx >> 6) & 7, tile_idx >> 9);
}
// tile dims: (64, 8, 1)
__noinline__ __device__ void op_2_scale_tile_task(int tile_idx) {
ark::scale<512, 512, 32, 0, 64, 8, 1>((ark::half *)&_ARK_BUF[1048576], (ark::half *)&_ARK_BUF[1048576], 2.3, (tile_idx & 63), (tile_idx >> 6) & 7, tile_idx >> 9);
}
__noinline__ __device__ void op_0_matmul() {
if(blockIdx.x < 64){
  if(threadIdx.x<128){
   op_0_matmul_tile_task(1*(blockIdx.x - 0) + threadIdx.x / 128 + 0);
  }
 }
}
__noinline__ __device__ void op_1_add() {
if(blockIdx.x < 80){
  if(threadIdx.x<160){
   op_1_add_tile_task(5*(blockIdx.x - 0) + threadIdx.x / 32 + 0);
  }
 }
if(blockIdx.x >= 80&& blockIdx.x < 108){
  if(threadIdx.x<128){
   op_1_add_tile_task(4*(blockIdx.x - 80) + threadIdx.x / 32 + 400);
  }
 }
}
__noinline__ __device__ void op_2_scale() {
if(blockIdx.x < 80){
  if(threadIdx.x<160){
   op_2_scale_tile_task(5*(blockIdx.x - 0) + threadIdx.x / 32 + 0);
  }
 }
if(blockIdx.x >= 80&& blockIdx.x < 108){
  if(threadIdx.x<128){
   op_2_scale_tile_task(4*(blockIdx.x - 80) + threadIdx.x / 32 + 400);
  }
 }
}
__device__ void ark_loop_body(int _iter) {
  op_0_matmul();
  ark::sync_gpu<108>(_ARK_LOOP_SYNC_STATE);
  op_1_add();
  ark::sync_gpu<108>(_ARK_LOOP_SYNC_STATE);
  op_2_scale();
  ark::sync_gpu<108>(_ARK_LOOP_SYNC_STATE);
}
extern "C" __global__ __launch_bounds__(256, 1)
void test_scheduler_simple_mm(volatile int *_it_a, volatile int *_it_b)
{
  ark::sync_gpu<108>(_ARK_LOOP_SYNC_STATE);
  for (;;) {
    if (threadIdx.x == 0) {
      *_it_b = 0;
      while (*_it_a == 0) {}
      _ITER = *_it_a;
    }
    __syncthreads();
    if (_ITER < 0) {
      return;
    }
    for (int _i = 0; _i < _ITER; ++_i) {
      ark_loop_body(_i);
      ark::sync_gpu<108>(_ARK_LOOP_SYNC_STATE);
    }
    if (threadIdx.x == 0) {
      *_it_a = 0;
      while (*_it_b == 0) {}
      _ITER = *_it_b;
    }
    __syncthreads();
    if (_ITER < 0) {
      return;
    }
    for (int _i = 0; _i < _ITER; ++_i) {
      ark_loop_body(_i);
      ark::sync_gpu<108>(_ARK_LOOP_SYNC_STATE);
    }
  }
}
